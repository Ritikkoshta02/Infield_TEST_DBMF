def get_edges(points_list):
    """Finds the edges in a list of coordinate points by checking adjacent states and groups them by quadrants."""
    edges = set()
    quadrant_edges = {1: set(), 2: set(), 3: set(), 4: set()}
    crossing_edges = set()
    
    def get_quadrant(x, y):
        if 1 <= x <= 15 and 1 <= y <= 15:
            return 1
        elif 16 <= x <= 30 and 1 <= y <= 15:
            return 2
        elif 1 <= x <= 15 and 16 <= y <= 30:
            return 3
        else:
            return 4
    
    for i in range(len(points_list) - 1):
        current_state = set(points_list[i])
        next_state = set(points_list[i + 1])
        for point in current_state:
            neighbor = (point[0], point[1] + 1) if (point[0], point[1] + 1) in next_state else (point[0], point[1] - 1) if (point[0], point[1] - 1) in next_state else None
            if neighbor:
                edge = (point, neighbor)
                edges.add(edge)
                q1, q2 = get_quadrant(*point), get_quadrant(*neighbor)
                if q1 == q2:
                    quadrant_edges[q1].add(edge)
                else:
                    crossing_edges.add(edge)
    
    return sorted(edges), quadrant_edges, crossing_edges

# Given coordinate lists
data = [
    [], 
    [(5,1), (10,1), (20,1), (25,1), (5,30), (10,30), (20,30), (25,30)],
    [(5,2), (10,2), (20,2), (25,2), (5,29), (10,29), (20,29), (25,29)],
    [(5,3), (10,3), (20,3), (25,3), (5,28), (10,28), (20,28), (25,28)],
    [(5,4), (10,4), (20,4), (25,4), (5,27), (10,27), (20,27), (25,27)],
    [(5,5), (10,5), (20,5), (25,5), (5,26), (10,26), (20,26), (25,26)],
    [(5,6), (10,6), (20,6), (25,6), (5,25), (10,25), (20,25), (25,25)],
    [(5,7), (10,7), (20,7), (25,7), (5,24), (10,24), (20,24), (25,24)],
    [(5,8), (10,8), (20,8), (25,8), (5,23), (10,23), (20,23), (25,23)],
    [(5,9), (10,9), (20,9), (25,9), (5,22), (10,22), (20,22), (25,22)],
    [(5,10), (11,9), (19,9), (25,10), (5,21), (11,22), (19,22), (25,21)],
    [(5,11), (12,9), (18,9), (25,11), (5,20), (12,22), (18,22), (25,20)],
    [(5,12), (12,9), (17,9), (25,12), (5,19), (13,22), (18,22), (25,19)],
    [(5,13), (13,9), (14,9), (15,9), (16,9), (25,13), (5,18), (14,22), (15,22), (16,22), (17,22), (25,18)],
    [(5,14), (13,9), (14,9), (15,9), (16,9), (25,14), (5,17), (14,22), (15,22), (16,22), (17,22), (25,17)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22) ],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,9), (14,9), (15,9), (16,9), (14,22), (15,22), (16,22), (17,22)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (13,10), (16,10), (17,21), (14,21)],
    [(5,14), (5,15), (5,16), (5,17), (25,14), (25,15), (25,16), (25,17), (14,10), (17,10), (16,21), (13,21)],
    [(6,14), (6,17), (24,14), (24,17), (14,10), (17,10), (16,21), (13,21)],
    [(7,14), (7,17), (23,14), (23,17), (14,10), (17,10), (16,21), (13,21)],
    [(8,14), (8,17), (22,14), (22,17), (14,10), (17,10), (16,21), (13,21)],
    [(9,14), (9,17), (21,14), (21,17), (14,10), (17,10), (16,21), (13,21)],
    [(10,14), (10,17), (20,14), (20,17), (14,10), (17,10), (16,21), (13,21)],
    [(11,14), (11,17), (19,14), (19,17), (14,10), (17,10), (16,21), (13,21)],
    [(12,14), (12,17), (18,14), (18,17), (14,10), (17,10), (16,21), (13,21)],
    [(13,14), (13,17), (17,14), (17,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (13,17), (17,14), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,14), (15,14), (16,14), (17,14), (13,17),(14,17), (15,17), (16,17), (14,10), (17,10), (16,21), (13,21)],
    [(14,10), (14,13), (17,10), (17,13), (13,18), (13,21),  (16,18), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(14,10), (14,11), (14,12), (14,13), (17,10), (17,11), (17,12), (17,13), (13,18), (13,19), (13,20), (13,21),  (16,18), (16,19), (16,20), (16,21) ],
    [(13,10), (13,13), (18,10), (18,13), (12,18), (12,21),  (17,18), (17,21) ],
    [(12,10), (12,13), (19,10), (19,13), (11,18), (11,21),  (18,18), (18,21) ],
    [(11,10), (11,13), (20,10), (20,13), (10,18), (10,21),  (19,18), (19,21) ],
    [(10,10), (10,13), (21,10), (21,13), (9,18), (9,21),  (20,18), (20,21) ],
    [(9,10), (9,13), (22,10), (22,13), (8,18), (8,21),  (21,18), (21,21) ],
    [(8,10), (8,13), (23,10), (23,13), (7,18), (7,21),  (22,18), (22,21) ],
    [(7,10), (7,13), (24,10), (24,13), (6,18), (6,21),  (23,18), (23,21) ],
    [(6,10), (6,13), (25,10), (25,13), (5,18), (5,21),  (24,18), (24,21) ],
    [(5,10), (5,13), (26,10), (26,13), (4,18), (4,21),  (25,18), (25,21) ],
    [(4,10), (4,13), (27,10), (27,13), (3,18), (3,21),  (26,18), (26,21) ],
    [(3,10), (3,13), (28,10), (28,13), (2,18), (2,21),  (27,18), (27,21) ],
    [(2,10), (2,13), (29,10), (29,13), (1,18), (1,21),  (28,18), (28,21) ],
    [(1,10), (1,13), (30,10), (30,13), (29,18), (29,21) ],
    [(30,18), (30,21) ],
]

# Get edges and classify by quadrants
edges, quadrant_edges, crossing_edges = get_edges(data)

# Print the edges
print("Edges:", edges)
print("Quadrant Edges:")
for q, e in quadrant_edges.items():
    print(f"Quadrant {q}: {e}")
print("Crossing Edges:", crossing_edges)
